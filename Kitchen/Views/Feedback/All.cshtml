@model List<Kitchen.Models.Feedback>

@{
    ViewData["Title"] = "Customer Feedback";
}

<div class="feedback-container">
    <div class="feedback-header">
        <div class="header-content">
            <img src="/Images/Logo.png" alt="Ta3aa Kol Logo" class="feedback-logo" />
            <div class="header-text">
                <h1>Customer Feedbacks</h1>
                <p class="subtitle">What our guests are saying</p>
            </div>
        </div>
        <div class="summary-cards">
            <div class="summary-card">
                <div class="summary-value">@Model.Count</div>
                <div class="summary-label">Total Reviews</div>
            </div>
            <div class="summary-card">
                <div class="summary-value">@(Model.Count > 0 ? Model.Average(f => f.Rate).ToString("0.0") : "0.0")</div>
                <div class="summary-label">Average Rating</div>
            </div>
        </div>
    </div>

    <div class="feedback-filters">
        <div class="search-box">
            <input type="text" id="feedbackSearch" placeholder="Search feedback..." />
            <i class="fas fa-search"></i>
        </div>
        <div class="filter-options">
            <select id="ratingFilter">
                <option value="0">All Ratings</option>
                <option value="5">★★★★★</option>
                <option value="4">★★★★☆</option>
                <option value="3">★★★☆☆</option>
                <option value="2">★★☆☆☆</option>
                <option value="1">★☆☆☆☆</option>
            </select>
        </div>
    </div>

    <div class="feedback-table-container">
        <table class="feedback-table">
            <thead>
                <tr>
                    <th class="rating-col">Rating</th>
                    <th class="comment-col">Comment</th>
                    <th class="customer-col">Customer</th>
                    <th class="order-col">Order</th>
                    @*<th class="actions-col">Actions</th>*@
                </tr>
            </thead>
            <tbody>
                @foreach (var feedback in Model.OrderByDescending(f => f.Id))
                {
                    <tr>
                        <td class="rating-cell">
                            <div class="star-rating" data-rating="@feedback.Rate">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <span class="star @(i <= feedback.Rate ? "filled" : "")">★</span>
                                }
                            </div>
                        </td>
                        <td>
                            <div class="comment-content">
                                @feedback.Comment
                                <div class="comment-meta">#@feedback.Id</div>
                            </div>
                        </td>
                        <td>@(feedback.Customer?.Name ?? "Anonymous")</td>
                        <td>Order #@feedback.OrderId</td>
                        @*
                        <td class="actions-cell">
                            <button class="action-btn reply-btn" data-id="@feedback.Id">
                                <i class="fas fa-reply"></i>
                            </button>
                            <button class="action-btn delete-btn" data-id="@feedback.Id">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                        *@
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
<style>
    .feedback-container {
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        padding: 30px;
        margin: 20px auto;
        max-width: 1200px;
    }

    .feedback-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        flex-wrap: wrap;
        gap: 20px;
        padding-bottom: 20px;
        border-bottom: 1px solid #eee;
    }

    .header-content {
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .feedback-logo {
        width: 60px;
        height: auto;
    }

    .header-text h1 {
        color: #333;
        margin: 0;
        font-size: 2rem;
    }

    .subtitle {
        color: #ec610c;
        margin: 5px 0 0;
        font-style: italic;
    }

    .summary-cards {
        display: flex;
        gap: 15px;
    }

    .summary-card {
        background-color: white;
        border-radius: 8px;
        padding: 15px 20px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
        text-align: center;
        min-width: 120px;
    }

    .summary-value {
        font-size: 1.8rem;
        font-weight: bold;
        color: #ec610c;
    }

    .summary-label {
        color: #666;
        font-size: 0.9rem;
    }

    .feedback-filters {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
        flex-wrap: wrap;
        gap: 15px;
    }

    .search-box {
        position: relative;
        flex-grow: 1;
        max-width: 400px;
    }

    .search-box input {
        width: 100%;
        padding: 10px 15px 10px 40px;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 1rem;
    }

    .search-box i {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        color: #999;
    }

    .filter-options select {
        padding: 10px 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: white;
        font-size: 1rem;
        color: #333;
    }

    .feedback-table-container {
        overflow-x: auto;
    }

    .feedback-table {
        width: 100%;
        border-collapse: collapse;
        background-color: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .feedback-table th {
        background-color: #f5f5f5;
        padding: 15px;
        text-align: left;
        font-weight: 600;
        color: #444;
        border-bottom: 2px solid #eee;
    }

    .feedback-table td {
        padding: 15px;
        border-bottom: 1px solid #eee;
        vertical-align: middle;
    }

    .feedback-table tr:last-child td {
        border-bottom: none;
    }

    .feedback-table tr:hover {
        background-color: #fafafa;
    }

    .rating-col { width: 120px; }
    .comment-col { width: auto; }
    .customer-col { width: 180px; }
    .order-col { width: 100px; }
    .actions-col { width: 100px; }

    .star-rating {
        color: #ffc107;
        font-size: 1.2rem;
        letter-spacing: 2px;
    }

    .star-rating .star {
        color: #ddd;
    }

    .star-rating .star.filled {
        color: #ffc107;
    }

    .comment-content {
        line-height: 1.5;
    }

    .comment-meta {
        font-size: 0.8rem;
        color: #999;
        margin-top: 5px;
    }

    .actions-cell {
        display: flex;
        gap: 10px;
    }

    .action-btn {
        background: none;
        border: none;
        color: #666;
        cursor: pointer;
        font-size: 1rem;
        padding: 5px;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s;
    }

    .action-btn:hover {
        background-color: #f0f0f0;
        color: #333;
    }

    .reply-btn:hover {
        color: #4CAF50;
    }

    .delete-btn:hover {
        color: #f44336;
    }

    .feedback-pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 15px;
        margin-top: 30px;
    }

    .pagination-btn {
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 8px 15px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .pagination-btn:not(:disabled):hover {
        background-color: #ec610c;
        color: white;
        border-color: #ec610c;
    }

    .pagination-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .page-info {
        color: #666;
    }

    @@media (max-width: 768px) {
        .feedback-header {
            flex-direction: column;
            align-items: flex-start;
        }

        .summary-cards {
            width: 100%;
            justify-content: space-between;
        }

        .feedback-table th, .feedback-table td {
            padding: 10px 8px;
            font-size: 0.9rem;
        }
    }
</style>


@section Scripts {
    <script>
        // Basic search functionality
        document.getElementById('feedbackSearch').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('.feedback-table tbody tr');

            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        });

        // Rating filter functionality
        document.getElementById('ratingFilter').addEventListener('change', function(e) {
            const selectedRating = parseInt(e.target.value);
            const rows = document.querySelectorAll('.feedback-table tbody tr');

            rows.forEach(row => {
                const rating = parseInt(row.querySelector('.star-rating').dataset.rating);
                row.style.display = (selectedRating === 0 || rating === selectedRating) ? '' : 'none';
            });
        });

        // Action button handlers
        document.querySelectorAll('.reply-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const feedbackId = this.dataset.id;
                alert(`Reply to feedback #${feedbackId}`);
                // Implement actual reply functionality here
            });
        });

        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const feedbackId = this.dataset.id;
                if (confirm('Are you sure you want to delete this feedback?')) {
                    alert(`Delete feedback #${feedbackId}`);
                    // Implement actual delete functionality here
                }
            });
        });
    </script>
}